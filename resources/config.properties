# The exposed validation types
validator.type = owl, shacl
# validator.typeOptions.owl = basic, advanced
# validator.typeOptions.shacl = basic, advanced
# The description to show for the different validator types. These are defined in properties such as validator.typeLabel.TYPE.
validator.typeLabel.owl = OWL
validator.typeLabel.shacl = SHACL
# validator.label.optionLabel = Mode
# Default type option labels provided via validator.optionLabel.OPTION properties. Specific ones can be set per type if needed via validator.typeOptionLabel.TYPE.OPTION.
# validator.optionLabel.basic = basic
# validator.optionLabel.advanced = advanced
# The validator.completeTypeOptionLabel.TYPE.OPTION properties can be used to define a complete label for the validation type. The default is "TYPE - OPTION" (e.g. BRegDCAT-AP - Version 2.00)
# validator.completeTypeOptionLabel.owl.basic = Validated OWL with basic configuration
# validator.completeTypeOptionLabel.shacl.basic = Validated SHACL with basic configuration
# validator.completeTypeOptionLabel.owl.advanced = Validated OWL with advanced configuration
# validator.completeTypeOptionLabel.shacl.advanced = Validated SHACL with advanced configuration

validator.shaclFile.owl = shapes/semic-shapes_owl.ttl
validator.shaclFile.shacl = shapes/semic-shapes_shacl.ttl
# validator.shaclFile.owl.basic = shapes/semic-shapes_owl.ttl
# validator.shaclFile.shacl.basic = shapes/semic-shapes_shacl.ttl
validator.externalShapes.owl = none
validator.externalShapes.shacl = none
# validator.externalShapes.owl.advanced = required
# validator.externalShapes.shacl.advanced = required

validator.mergeModelsBeforeValidation = false

validator.bannerHtml=<div class="mt-4 container-fluid"><div class="row"><div class="col-12"><div class="d-table"><div class="d-table-row"><div class="cursor-pointer d-table-cell validatorReload"><h1>SEMIC OWL/SHACL Validator</h1></div></div><div class="d-table-row"><div class="pb-3 pt-3"><p>This service allows you to assess the conformance of an&nbsp;<strong>OWL Model</strong>&nbsp;(ontology) or a&nbsp;<strong>SHACL Shapes</strong>&nbsp;file with the&nbsp;<a href="https://semiceu.github.io/style-guide/1.0.0/gc-conceptual-model-conventions.html" target="_blank">SEMIC Style Guide</a>. For each guideline in the style guide, a set of rules have been implemented, which asses whether an OWL or SHACL convention is respected. These rules specify constraints on the structure, relationships, and properties within the models. The set of rules employed during validation are documented&nbsp;<a href="https://meaningfy-ws.github.io/semic-styleguide-rdf-validator/" target="_blank">here</a>.<p>The content to validate can be provided as a&nbsp;<strong>file</strong>,&nbsp;<strong>URI</strong>, or &nbsp;<strong>direct input</strong>. Documentation on using the Interoperability Test Bed's (ITB) RDF validator is available&nbsp;<a href="https://www.itb.ec.europa.eu/docs/guides/latest/validatingRDF/index.html#step-6-use-the-validator" target="_blank">here</a>.<p><a href="#" data-target="#infoModal" data-toggle="modal">How to Use</a></div></div></div></div></div></div><div class="fade modal" id="infoModal" role="dialog"><div class="modal-dialog modal-lg" style="width:90%;max-width:1140px"><div class="modal-content"><div class="modal-header"><h3>How to Use</h3></div><div class="modal-body"><h2>Validator Options</h2><p>This validator has two modes OWL and SHACL and for each there are two options available: basic and advanced. The difference between the two options is the number of input files. In basic, only one input is taken, while in advanced, additional SHACL shape files can be provided to augment the validation. For easy use, choose the basic option as no input (other than the OWL or SHACL file to validate) is necessary and the validator's default SHACL shapes are used.<h2>Input File</h2><p>This file must be a valid (OWL or SHACL) RDF file. The syntax (serialization) can be set but otherwise will default to be automatically guessed from the file extension.<h3>Sample OWL file in Turtle (TTL) syntax:</h3><code class="code_block">@prefix ex: &lt;http://example.org/&gt; .<br>@prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt; .<br>@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .<br><br>ex:Person a owl:Class .<br>ex:Human a owl:Class .<br><br>ex:Person rdfs:subClassOf ex:Human .<br><br>ex:name a owl:DatatypeProperty .<br>ex:hasFriend a owl:ObjectProperty .</code><h3>Sample SHACL file in Turtle (TTL) syntax:</h3><code class="code_block">@prefix ex: &lt;http://example.org/&gt; .<br>@prefix exsh: &lt;http://example.org/shapes/&gt; .<br>@prefix owl: &lt;http://www.w3.org/2002/07/owl#&gt; .<br>@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .<br>@prefix sh: &lt;http://www.w3.org/ns/shacl#&gt; .<br><br>exsh:PersonShape a sh:NodeShape ;<br>sh:targetClass ex:Person ;<br>sh:property [<br>sh:path rdfs:label ;<br>sh:minCount 1<br>]<br>.</code></div><div class="modal-footer"><button class="btn btn-default" data-dismiss="modal" type="button">Close</button></div></div></div></div><hr class="mt-4 mb-4"><style>code{white-space:pre-line}.code_block{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;color:#333;word-break:break-all;word-wrap:break-word;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px;font-family:Menlo,Monaco,Consolas,"Courier New",monospace;overflow:auto}</style>
